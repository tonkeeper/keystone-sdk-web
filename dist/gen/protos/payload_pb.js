"use strict";
// @generated by protoc-gen-es v1.2.0 with parameter "target=ts,import_extension="
// @generated from file protos/payload.proto (package protoc, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Payload_Type = exports.Payload = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const transaction_pb_1 = require("./transaction_pb");
const sign_transaction_result_pb_1 = require("./sign_transaction_result_pb");
/**
 * @generated from message protoc.Payload
 */
class Payload extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: protoc.Payload.Type type = 1;
         */
        this.type = Payload_Type.RESERVE;
        /**
         * @generated from field: string xfp = 2;
         */
        this.xfp = "";
        /**
         * @generated from oneof protoc.Payload.Content
         */
        this.Content = { case: undefined };
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Payload().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Payload().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Payload().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Payload, a, b);
    }
}
Payload.runtime = protobuf_1.proto3;
Payload.typeName = "protoc.Payload";
Payload.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(Payload_Type) },
    { no: 2, name: "xfp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "signTx", kind: "message", T: transaction_pb_1.SignTransaction, oneof: "Content" },
    { no: 7, name: "signTxResult", kind: "message", T: sign_transaction_result_pb_1.SignTransactionResult, oneof: "Content" },
]);
exports.Payload = Payload;
/**
 * @generated from enum protoc.Payload.Type
 */
var Payload_Type;
(function (Payload_Type) {
    /**
     * @generated from enum value: TYPE_RESERVE = 0;
     */
    Payload_Type[Payload_Type["RESERVE"] = 0] = "RESERVE";
    /**
     * @generated from enum value: TYPE_SYNC = 1;
     */
    Payload_Type[Payload_Type["SYNC"] = 1] = "SYNC";
    /**
     * @generated from enum value: TYPE_SIGN_TX = 2;
     */
    Payload_Type[Payload_Type["SIGN_TX"] = 2] = "SIGN_TX";
    /**
     * @generated from enum value: TYPE_SIGN_MSG = 3;
     */
    Payload_Type[Payload_Type["SIGN_MSG"] = 3] = "SIGN_MSG";
    /**
     * @generated from enum value: TYPE_SIGN_MULTI_SIG = 4;
     */
    Payload_Type[Payload_Type["SIGN_MULTI_SIG"] = 4] = "SIGN_MULTI_SIG";
    /**
     * @generated from enum value: TYPE_SYNC_MULTI_SIG_MSG = 5;
     */
    Payload_Type[Payload_Type["SYNC_MULTI_SIG_MSG"] = 5] = "SYNC_MULTI_SIG_MSG";
    /**
     * @generated from enum value: TYPE_SIGN_ETH_MULTI_SIG_MSG = 6;
     */
    Payload_Type[Payload_Type["SIGN_ETH_MULTI_SIG_MSG"] = 6] = "SIGN_ETH_MULTI_SIG_MSG";
    /**
     * @generated from enum value: TYPE_VERIFY_ADDRESS = 7;
     */
    Payload_Type[Payload_Type["VERIFY_ADDRESS"] = 7] = "VERIFY_ADDRESS";
    /**
     * @generated from enum value: TYPE_STAKING = 8;
     */
    Payload_Type[Payload_Type["STAKING"] = 8] = "STAKING";
    /**
     * @generated from enum value: TYPE_SIGN_TX_RESULT = 9;
     */
    Payload_Type[Payload_Type["SIGN_TX_RESULT"] = 9] = "SIGN_TX_RESULT";
})(Payload_Type = exports.Payload_Type || (exports.Payload_Type = {}));
// Retrieve enum metadata with: proto3.getEnumType(Payload_Type)
protobuf_1.proto3.util.setEnumType(Payload_Type, "protoc.Payload.Type", [
    { no: 0, name: "TYPE_RESERVE" },
    { no: 1, name: "TYPE_SYNC" },
    { no: 2, name: "TYPE_SIGN_TX" },
    { no: 3, name: "TYPE_SIGN_MSG" },
    { no: 4, name: "TYPE_SIGN_MULTI_SIG" },
    { no: 5, name: "TYPE_SYNC_MULTI_SIG_MSG" },
    { no: 6, name: "TYPE_SIGN_ETH_MULTI_SIG_MSG" },
    { no: 7, name: "TYPE_VERIFY_ADDRESS" },
    { no: 8, name: "TYPE_STAKING" },
    { no: 9, name: "TYPE_SIGN_TX_RESULT" },
]);
